1. Используя различные утилиты для анализа памяти виртуальной машины провести анализ работы программы из второго модуля. Программа заявок.

2. Данные анализа описать в текстовом файле и добавить в репозиторий. В файле нужно указать, каким инструментом проведен анализ и что по нему видно.

3. Попробовать добиться состояния выхода за пределы памяти и посмотреть состояние виртуальной машины.

Анализ программы заявок.

Утилита jmap.
-----------------------------------------------------------------------------
Запуск программы с ключом -Xmx4m

Создана одна заявка.
С помощью ключа ограничиваем максимальный размер кучи 4 MB.
По умолчанию JVM использует GC G1 с 4 потоками (процессор 4-х ядерный).
Как видно из лога ниже, создана куча размером в 4 МВ и 4 регионами, то есть каждый регион по мегабайту.
Ёмкость Эдема составляет 1 регион, ёмкость выживших 0 и ёмкость Old 3 региона.
Также из лога видно, что Эдем пустой, значит произошла сборка мусора, единственный регион Едема очистился
и объекты переместились сразу в Old Generation, где мы видим 3 занятых региона.

Лог:

C:\Users\Евгений>jhsdb jmap --heap --pid 19584
Attaching to process ID 19584, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 12.0.2+10

using thread-local object allocation.
Garbage-First (G1) GC with 4 thread(s)

Heap Configuration:
   MinHeapFreeRatio         = 40
   MaxHeapFreeRatio         = 70
   MaxHeapSize              = 4194304 (4.0MB)
   NewSize                  = 1363144 (1.2999954223632812MB)
   MaxNewSize               = 2097152 (2.0MB)
   OldSize                  = 5452592 (5.1999969482421875MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 21807104 (20.796875MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 1048576 (1.0MB)

Heap Usage:
G1 Heap:
   regions  = 4
   capacity = 4194304 (4.0MB)
   used     = 2519400 (2.4026870727539062MB)
   free     = 1674904 (1.5973129272460938MB)
   60.067176818847656% used
G1 Young Generation:
Eden Space:
   regions  = 0
   capacity = 1048576 (1.0MB)
   used     = 0 (0.0MB)
   free     = 1048576 (1.0MB)
   0.0% used
Survivor Space:
   regions  = 0
   capacity = 0 (0.0MB)
   used     = 0 (0.0MB)
   free     = 0 (0.0MB)
   0.0% used
G1 Old Generation:
   regions  = 3
   capacity = 3145728 (3.0MB)
   used     = 2519400 (2.4026870727539062MB)
   free     = 626328 (0.5973129272460938MB)
   80.08956909179688% used
   
--------------------------------------------------------------
Запуск программы с ключом -Xmx6m  

Зададим теперь размер кучи в 6 МВ.
Теперь куча имеет 6 регионов:
3 в Эдеме
1 в выживших
2 в Old
Из лога видим, что сборка мусора прошла, но в Эдеме есть один регион занятый, один в выживших и
в Old 2 региона. Таким образом увеличение кучи привело к тому, что
сборщик мусора очищает Эдем уже не так агрессивно, поскольку в нем больше памяти.
Также начал использоваться регион выживших, потому что JVM выделила ему 1 регион.

Лог (сокращенный для удобства):
   
C:\Users\Евгений>jhsdb jmap --heap --pid 13820

Heap Usage:
G1 Heap:
   regions  = 6
   capacity = 6291456 (6.0MB)
   used     = 3330128 (3.1758575439453125MB)
   free     = 2961328 (2.8241424560546875MB)
   52.93095906575521% used
G1 Young Generation:
Eden Space:
   regions  = 1
   capacity = 3145728 (3.0MB)
   used     = 1048576 (1.0MB)
   free     = 2097152 (2.0MB)
   33.333333333333336% used
Survivor Space:
   regions  = 1
   capacity = 1048576 (1.0MB)
   used     = 1048576 (1.0MB)
   free     = 0 (0.0MB)
   100.0% used
G1 Old Generation:
   regions  = 2
   capacity = 2097152 (2.0MB)
   used     = 1232976 (1.1758575439453125MB)
   free     = 864176 (0.8241424560546875MB)
   58.792877197265625% used
-----------------------------------------------------------------
Запуск программы без ключей:

Из лога видно, что при запуске без ключей выделяется под кучу 4 GB памяти.
При этом в нашем случае емкость Едема 15 МВ, вышивших 0 МВ и Old 239 МВ.
Судя по тому, что память занята только в Едеме, сборщик мусора не запускался,
что логично, ибо ее достаточно.

Лог (сокращенный для удобства):

C:\Users\Евгений>jhsdb jmap --heap --pid 23464
Heap Usage:
G1 Heap:
   regions  = 4062
   capacity = 4259315712 (4062.0MB)
   used     = 6291456 (6.0MB)
   free     = 4253024256 (4056.0MB)
   0.14771048744460857% used
G1 Young Generation:
Eden Space:
   regions  = 7
   capacity = 15728640 (15.0MB)
   used     = 7340032 (7.0MB)
   free     = 8388608 (8.0MB)
   46.666666666666664% used
Survivor Space:
   regions  = 0
   capacity = 0 (0.0MB)
   used     = 0 (0.0MB)
   free     = 0 (0.0MB)
   0.0% used
G1 Old Generation:
   regions  = 0
   capacity = 250609664 (239.0MB)
   used     = 0 (0.0MB)
   free     = 250609664 (239.0MB)
   0.0% used  
------------------------------------------------------------------
Запуск программы с ключом -Xmx2m 

Программа вываливается с ошибкой.
Что логично, ибо из предыдуших опытов было видно, что программе нужно чуть более 3МВ для работы.

Exception in thread "main" FATAL ERROR in native method: processing of -javaagent failed

Process finished with exit code 1
-------------------------------------------------------------------

Используем визуальные средства диагностики.
С сайта https://visualvm.github.io скачал программу visualVM.
Установил плагин Visual GC.

Запуск программы с ключом -Xmx8m

В данной программе на закладке Visual GC можно видеть заполняемость различных регионов кучи,
динамику их изменения.
https://yadi.sk/i/MMenjhwBxh_OHA  

Также можно просмотреть количество потоков, их назначение и состояние:
https://yadi.sk/i/8Ztfd9b1iqTQYw

На закладке "Монитор" удобно отслеживать общее состояние памяти, загрузки процессора, потоков, загрузки классов:
https://yadi.sk/i/cE0yqSQgw8nO1g